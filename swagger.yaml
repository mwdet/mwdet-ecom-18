swagger: '2.0'
info:
  title: REST API TEST
  description: REST API TEST API
  version: 1.0.0
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: TESTAPI
    description: AWS API gateway
paths:
  /payments:
    post:
      summary: Say Hello API
      operationId: megha-test-apigateway-swagger-lambda
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: The details of the payment request.
          required: true
          schema:
            $ref: '#/definitions/HelloWorldRequest'
      tags:
        - APITEST
      responses:
        '200':
          description: The details of the payment response
          schema:
            $ref: '#/definitions/HelloWorldResponse'
          headers:
            X-Requested-With:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
        '400':
          description: >-
            Bad request. The client sent some invalid data in the request, e.g.
            missing or incorrect content in the payload or parameters. Could
            also represent a generic client error.
          schema:
            $ref: '#/definitions/Error'
          headers:
            X-Requested-With:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
    options:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          headers:
            X-Requested-With:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''POST,GET,OPTIONS'''
              method.response.header.X-Requested-With: '''*'''
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
        
  /items:
    put:
      summary: get record from dyanamoDB
      operationId: megha-crud-functionality
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: The details of the payment request.
          required: true
          schema:
            $ref: '#/definitions/putRequest'
      tags:
        - APITEST
      responses:
        '200':
          description: The details of the payment response
          schema:
            $ref: '#/definitions/putResponse'
          headers:
            X-Requested-With:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
        '400':
          description: >-
            Bad request. The client sent some invalid data in the request, e.g.
            missing or incorrect content in the payload or parameters. Could
            also represent a generic client error.
          schema:
            $ref: '#/definitions/Error'
          headers:
            X-Requested-With:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
    delete:
      summary: 'This API is for deleting'
      description: Delete User API
      operationId: megha-crud-functionality-delete
      tags:
        - Delete User API
      parameters:
        - in: query
          name: id
          type: "string"
          required: true
          description: id of the user
      responses:
        '200':
          description: The details of the payment response
          schema:
            $ref: '#/definitions/deleteResponse'
          headers:
            X-Requested-With:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
        '400':
          description: >-
            Bad request. The client sent some invalid data in the request, e.g.
            missing or incorrect content in the payload or parameters. Could
            also represent a generic client error.
          schema:
            $ref: '#/definitions/Error'
          headers:
            X-Requested-With:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
  /items/{id}:
    get:
      summary: get record from dyanamoDB
      operationId: megha-crud-functionality-get
      tags:
        - APITEST
      parameters:
        - in: path
          name: id
          type: "string"
          description: id
          required: true
      responses:
        '200':
          description: The details of the payment response
          schema:
            $ref: '#/definitions/getResponse'
          headers:
            X-Requested-With:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
        '400':
          description: >-
            Bad request. The client sent some invalid data in the request, e.g.
            missing or incorrect content in the payload or parameters. Could
            also represent a generic client error.
          schema:
            $ref: '#/definitions/Error'
          headers:
            X-Requested-With:
              type: string
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
  
definitions:
  Error:
    type: object
    properties:
      code:
        type: string
        description: >-
          An optional short descriptive code that identifies the type of error
          that occurred
      type:
        type: string
        description: >-
          The type of error that occurred, e.g. 'BadRequest', 'TypeError',
          'Error', ...
      message:
        type: string
        description: A human-readable message that describes the error that occurred
      httpStatus:
        type: string
        description: The HTTP status code associated with the error that occurred
      cause:
        type: string
        description: >-
          An optional human-readable message that describes the underlying cause
          of the error that occurred (if any)
      causeStatus:
        type: string
        description: >-
          An optional HTTP status code associated with the underlying cause of
          the error that occurred (if any)
      auditRef:
        type: string
        description: >-
          The unique audit reference number of the AWS Lambda invocation that
          failed
      awsRequestId:
        type: string
        description: >-
          The optional unique AWS request ID of the AWS Lambda invocation that
          failed, which will ONLY be included if it differs from the `auditRef`
  putRequest:
    type: object
    properties:
      id:
        type: string
        description: The id
      name:
        type: string
        description: The Name
      price:
        type: string
        description: The price
      key:
        type: string
        description: the key
  putResponse:
    type: object
    properties:
      message:
        type: string
        description: A return message
  getResponse:
    type: object
    properties:
      message:
        type: string
        description: A return message
  deleteResponse:
    type: object
    properties:
      message:
        type: string
        description: A return message
  HelloWorldRequest:
    type: object
    properties:
      name:
        type: string
        description: The Name
  HelloWorldResponse:
    type: object
    properties:
      message:
        type: string
        description: A return message
 
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /self-learning-swager/testAPI/1.0.0
x-aws-api-id: 'fyt93omqn0'